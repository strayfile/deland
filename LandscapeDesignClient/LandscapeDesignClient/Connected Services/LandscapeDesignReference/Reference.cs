//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LandscapeDesignClient.LandscapeDesignReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LDUser", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer.LandscapeDesignMode" +
        "l")]
    [System.SerializableAttribute()]
    public partial class LDUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidCustomFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectsFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault))]
    public partial class InvalidCustomFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomErrorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomError {
            get {
                return this.CustomErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomErrorField, value) != true)) {
                    this.CustomErrorField = value;
                    this.RaisePropertyChanged("CustomError");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidProjectsFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
    [System.SerializableAttribute()]
    public partial class InvalidProjectsFault : LandscapeDesignClient.LandscapeDesignReference.InvalidCustomFault {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
    [System.SerializableAttribute()]
    public partial class InvalidProjectItemFault : LandscapeDesignClient.LandscapeDesignReference.InvalidCustomFault {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
    [System.SerializableAttribute()]
    public partial class InvalidUserFault : LandscapeDesignClient.LandscapeDesignReference.InvalidCustomFault {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LDProject", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer.LandscapeDesignMode" +
        "l")]
    [System.SerializableAttribute()]
    public partial class LDProject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ChangeDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDEntity> EntitiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LightningField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShareField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SoilField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SoilTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TemperatureMaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TemperatureMinField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ChangeDate {
            get {
                return this.ChangeDateField;
            }
            set {
                if ((this.ChangeDateField.Equals(value) != true)) {
                    this.ChangeDateField = value;
                    this.RaisePropertyChanged("ChangeDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDEntity> Entities {
            get {
                return this.EntitiesField;
            }
            set {
                if ((object.ReferenceEquals(this.EntitiesField, value) != true)) {
                    this.EntitiesField = value;
                    this.RaisePropertyChanged("Entities");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdUser {
            get {
                return this.IdUserField;
            }
            set {
                if ((this.IdUserField.Equals(value) != true)) {
                    this.IdUserField = value;
                    this.RaisePropertyChanged("IdUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Lightning {
            get {
                return this.LightningField;
            }
            set {
                if ((this.LightningField.Equals(value) != true)) {
                    this.LightningField = value;
                    this.RaisePropertyChanged("Lightning");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Share {
            get {
                return this.ShareField;
            }
            set {
                if ((this.ShareField.Equals(value) != true)) {
                    this.ShareField = value;
                    this.RaisePropertyChanged("Share");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Soil {
            get {
                return this.SoilField;
            }
            set {
                if ((this.SoilField.Equals(value) != true)) {
                    this.SoilField = value;
                    this.RaisePropertyChanged("Soil");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SoilType {
            get {
                return this.SoilTypeField;
            }
            set {
                if ((this.SoilTypeField.Equals(value) != true)) {
                    this.SoilTypeField = value;
                    this.RaisePropertyChanged("SoilType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TemperatureMax {
            get {
                return this.TemperatureMaxField;
            }
            set {
                if ((this.TemperatureMaxField.Equals(value) != true)) {
                    this.TemperatureMaxField = value;
                    this.RaisePropertyChanged("TemperatureMax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TemperatureMin {
            get {
                return this.TemperatureMinField;
            }
            set {
                if ((this.TemperatureMinField.Equals(value) != true)) {
                    this.TemperatureMinField = value;
                    this.RaisePropertyChanged("TemperatureMin");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LDEntity", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer.LandscapeDesignMode" +
        "l")]
    [System.SerializableAttribute()]
    public partial class LDEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanBeOverlappingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanResizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdProjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LandscapeDesignClient.LandscapeDesignReference.DbGeometry PolygonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RotateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TextureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanBeOverlapping {
            get {
                return this.CanBeOverlappingField;
            }
            set {
                if ((this.CanBeOverlappingField.Equals(value) != true)) {
                    this.CanBeOverlappingField = value;
                    this.RaisePropertyChanged("CanBeOverlapping");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanResize {
            get {
                return this.CanResizeField;
            }
            set {
                if ((this.CanResizeField.Equals(value) != true)) {
                    this.CanResizeField = value;
                    this.RaisePropertyChanged("CanResize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((this.CategoryField.Equals(value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdProject {
            get {
                return this.IdProjectField;
            }
            set {
                if ((this.IdProjectField.Equals(value) != true)) {
                    this.IdProjectField = value;
                    this.RaisePropertyChanged("IdProject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Layer {
            get {
                return this.LayerField;
            }
            set {
                if ((this.LayerField.Equals(value) != true)) {
                    this.LayerField = value;
                    this.RaisePropertyChanged("Layer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LandscapeDesignClient.LandscapeDesignReference.DbGeometry Polygon {
            get {
                return this.PolygonField;
            }
            set {
                if ((object.ReferenceEquals(this.PolygonField, value) != true)) {
                    this.PolygonField = value;
                    this.RaisePropertyChanged("Polygon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rotate {
            get {
                return this.RotateField;
            }
            set {
                if ((this.RotateField.Equals(value) != true)) {
                    this.RotateField = value;
                    this.RaisePropertyChanged("Rotate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Texture {
            get {
                return this.TextureField;
            }
            set {
                if ((this.TextureField.Equals(value) != true)) {
                    this.TextureField = value;
                    this.RaisePropertyChanged("Texture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DbGeometry", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Entity.Spatial")]
    [System.SerializableAttribute()]
    public partial class DbGeometry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LandscapeDesignClient.LandscapeDesignReference.DbGeometryWellKnownValue GeometryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LandscapeDesignClient.LandscapeDesignReference.DbGeometryWellKnownValue Geometry {
            get {
                return this.GeometryField;
            }
            set {
                if ((object.ReferenceEquals(this.GeometryField, value) != true)) {
                    this.GeometryField = value;
                    this.RaisePropertyChanged("Geometry");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DbGeometryWellKnownValue", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Entity.Spatial")]
    [System.SerializableAttribute()]
    public partial class DbGeometryWellKnownValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CoordinateSystemIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WellKnownTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] WellKnownBinaryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int CoordinateSystemId {
            get {
                return this.CoordinateSystemIdField;
            }
            set {
                if ((this.CoordinateSystemIdField.Equals(value) != true)) {
                    this.CoordinateSystemIdField = value;
                    this.RaisePropertyChanged("CoordinateSystemId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string WellKnownText {
            get {
                return this.WellKnownTextField;
            }
            set {
                if ((object.ReferenceEquals(this.WellKnownTextField, value) != true)) {
                    this.WellKnownTextField = value;
                    this.RaisePropertyChanged("WellKnownText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public byte[] WellKnownBinary {
            get {
                return this.WellKnownBinaryField;
            }
            set {
                if ((object.ReferenceEquals(this.WellKnownBinaryField, value) != true)) {
                    this.WellKnownBinaryField = value;
                    this.RaisePropertyChanged("WellKnownBinary");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LDEntityTexture", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer.LandscapeDesignMode" +
        "l")]
    [System.SerializableAttribute()]
    public partial class LDEntityTexture : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShareField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] TextureField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((this.CategoryField.Equals(value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdUser {
            get {
                return this.IdUserField;
            }
            set {
                if ((this.IdUserField.Equals(value) != true)) {
                    this.IdUserField = value;
                    this.RaisePropertyChanged("IdUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Share {
            get {
                return this.ShareField;
            }
            set {
                if ((this.ShareField.Equals(value) != true)) {
                    this.ShareField = value;
                    this.RaisePropertyChanged("Share");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Texture {
            get {
                return this.TextureField;
            }
            set {
                if ((object.ReferenceEquals(this.TextureField, value) != true)) {
                    this.TextureField = value;
                    this.RaisePropertyChanged("Texture");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LDPlant", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer.LandscapeDesignMode" +
        "l")]
    [System.SerializableAttribute()]
    public partial class LDPlant : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CareField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CrownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdTextureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LightningField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OverlappableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RadiusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResizableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShareField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SoilField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SoilTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TemperatureMaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TemperatureMinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WateringField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Care {
            get {
                return this.CareField;
            }
            set {
                if ((this.CareField.Equals(value) != true)) {
                    this.CareField = value;
                    this.RaisePropertyChanged("Care");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((this.CategoryField.Equals(value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Crown {
            get {
                return this.CrownField;
            }
            set {
                if ((this.CrownField.Equals(value) != true)) {
                    this.CrownField = value;
                    this.RaisePropertyChanged("Crown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdTexture {
            get {
                return this.IdTextureField;
            }
            set {
                if ((this.IdTextureField.Equals(value) != true)) {
                    this.IdTextureField = value;
                    this.RaisePropertyChanged("IdTexture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdUser {
            get {
                return this.IdUserField;
            }
            set {
                if ((this.IdUserField.Equals(value) != true)) {
                    this.IdUserField = value;
                    this.RaisePropertyChanged("IdUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Lightning {
            get {
                return this.LightningField;
            }
            set {
                if ((this.LightningField.Equals(value) != true)) {
                    this.LightningField = value;
                    this.RaisePropertyChanged("Lightning");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Overlappable {
            get {
                return this.OverlappableField;
            }
            set {
                if ((this.OverlappableField.Equals(value) != true)) {
                    this.OverlappableField = value;
                    this.RaisePropertyChanged("Overlappable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Radius {
            get {
                return this.RadiusField;
            }
            set {
                if ((this.RadiusField.Equals(value) != true)) {
                    this.RadiusField = value;
                    this.RaisePropertyChanged("Radius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Resizable {
            get {
                return this.ResizableField;
            }
            set {
                if ((this.ResizableField.Equals(value) != true)) {
                    this.ResizableField = value;
                    this.RaisePropertyChanged("Resizable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Share {
            get {
                return this.ShareField;
            }
            set {
                if ((this.ShareField.Equals(value) != true)) {
                    this.ShareField = value;
                    this.RaisePropertyChanged("Share");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Soil {
            get {
                return this.SoilField;
            }
            set {
                if ((this.SoilField.Equals(value) != true)) {
                    this.SoilField = value;
                    this.RaisePropertyChanged("Soil");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SoilType {
            get {
                return this.SoilTypeField;
            }
            set {
                if ((this.SoilTypeField.Equals(value) != true)) {
                    this.SoilTypeField = value;
                    this.RaisePropertyChanged("SoilType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TemperatureMax {
            get {
                return this.TemperatureMaxField;
            }
            set {
                if ((this.TemperatureMaxField.Equals(value) != true)) {
                    this.TemperatureMaxField = value;
                    this.RaisePropertyChanged("TemperatureMax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TemperatureMin {
            get {
                return this.TemperatureMinField;
            }
            set {
                if ((this.TemperatureMinField.Equals(value) != true)) {
                    this.TemperatureMinField = value;
                    this.RaisePropertyChanged("TemperatureMin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Watering {
            get {
                return this.WateringField;
            }
            set {
                if ((this.WateringField.Equals(value) != true)) {
                    this.WateringField = value;
                    this.RaisePropertyChanged("Watering");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LDPlantCharacteristics", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer.LandscapeDesignMode" +
        "l")]
    [System.SerializableAttribute()]
    public partial class LDPlantCharacteristics : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> CareTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> LightningField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> SoilNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> SoilPHField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> SoilTypesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> WateringField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> CareType {
            get {
                return this.CareTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.CareTypeField, value) != true)) {
                    this.CareTypeField = value;
                    this.RaisePropertyChanged("CareType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> Lightning {
            get {
                return this.LightningField;
            }
            set {
                if ((object.ReferenceEquals(this.LightningField, value) != true)) {
                    this.LightningField = value;
                    this.RaisePropertyChanged("Lightning");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> SoilNames {
            get {
                return this.SoilNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.SoilNamesField, value) != true)) {
                    this.SoilNamesField = value;
                    this.RaisePropertyChanged("SoilNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> SoilPH {
            get {
                return this.SoilPHField;
            }
            set {
                if ((object.ReferenceEquals(this.SoilPHField, value) != true)) {
                    this.SoilPHField = value;
                    this.RaisePropertyChanged("SoilPH");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> SoilTypes {
            get {
                return this.SoilTypesField;
            }
            set {
                if ((object.ReferenceEquals(this.SoilTypesField, value) != true)) {
                    this.SoilTypesField = value;
                    this.RaisePropertyChanged("SoilTypes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> Watering {
            get {
                return this.WateringField;
            }
            set {
                if ((object.ReferenceEquals(this.WateringField, value) != true)) {
                    this.WateringField = value;
                    this.RaisePropertyChanged("Watering");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LDBuilding", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer.LandscapeDesignMode" +
        "l")]
    [System.SerializableAttribute()]
    public partial class LDBuilding : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OverlappableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LandscapeDesignClient.LandscapeDesignReference.DbGeometry PolygonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SavedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShareField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((this.CategoryField.Equals(value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdUser {
            get {
                return this.IdUserField;
            }
            set {
                if ((this.IdUserField.Equals(value) != true)) {
                    this.IdUserField = value;
                    this.RaisePropertyChanged("IdUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Overlappable {
            get {
                return this.OverlappableField;
            }
            set {
                if ((this.OverlappableField.Equals(value) != true)) {
                    this.OverlappableField = value;
                    this.RaisePropertyChanged("Overlappable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LandscapeDesignClient.LandscapeDesignReference.DbGeometry Polygon {
            get {
                return this.PolygonField;
            }
            set {
                if ((object.ReferenceEquals(this.PolygonField, value) != true)) {
                    this.PolygonField = value;
                    this.RaisePropertyChanged("Polygon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Saved {
            get {
                return this.SavedField;
            }
            set {
                if ((this.SavedField.Equals(value) != true)) {
                    this.SavedField = value;
                    this.RaisePropertyChanged("Saved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Share {
            get {
                return this.ShareField;
            }
            set {
                if ((this.ShareField.Equals(value) != true)) {
                    this.ShareField = value;
                    this.RaisePropertyChanged("Share");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LDBuildingCharacteristics", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer.LandscapeDesignMode" +
        "l")]
    [System.SerializableAttribute()]
    public partial class LDBuildingCharacteristics : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, string> CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, bool> OverlapableField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, string> Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, bool> Overlapable {
            get {
                return this.OverlapableField;
            }
            set {
                if ((object.ReferenceEquals(this.OverlapableField, value) != true)) {
                    this.OverlapableField = value;
                    this.RaisePropertyChanged("Overlapable");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LandscapeDesignReference.ILandscapeDesignService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ILandscapeDesignService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/Login", ReplyAction="http://tempuri.org/ILandscapeDesignService/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/LoginInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        LandscapeDesignClient.LandscapeDesignReference.LDUser Login(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/Login", ReplyAction="http://tempuri.org/ILandscapeDesignService/LoginResponse")]
        System.Threading.Tasks.Task<LandscapeDesignClient.LandscapeDesignReference.LDUser> LoginAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/Register", ReplyAction="http://tempuri.org/ILandscapeDesignService/RegisterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/RegisterInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        LandscapeDesignClient.LandscapeDesignReference.LDUser Register(string email, string password, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/Register", ReplyAction="http://tempuri.org/ILandscapeDesignService/RegisterResponse")]
        System.Threading.Tasks.Task<LandscapeDesignClient.LandscapeDesignReference.LDUser> RegisterAsync(string email, string password, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/SendConfirmKey", ReplyAction="http://tempuri.org/ILandscapeDesignService/SendConfirmKeyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/SendConfirmKeyInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        bool SendConfirmKey(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/SendConfirmKey", ReplyAction="http://tempuri.org/ILandscapeDesignService/SendConfirmKeyResponse")]
        System.Threading.Tasks.Task<bool> SendConfirmKeyAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/ConfirmRegister", ReplyAction="http://tempuri.org/ILandscapeDesignService/ConfirmRegisterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/ConfirmRegisterInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        bool ConfirmRegister(string email, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/ConfirmRegister", ReplyAction="http://tempuri.org/ILandscapeDesignService/ConfirmRegisterResponse")]
        System.Threading.Tasks.Task<bool> ConfirmRegisterAsync(string email, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/EditUserName", ReplyAction="http://tempuri.org/ILandscapeDesignService/EditUserNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/EditUserNameInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        void EditUserName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/EditUserName", ReplyAction="http://tempuri.org/ILandscapeDesignService/EditUserNameResponse")]
        System.Threading.Tasks.Task EditUserNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/EditUserPassword", ReplyAction="http://tempuri.org/ILandscapeDesignService/EditUserPasswordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/EditUserPasswordInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        void EditUserPassword(string pass, string newpass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/EditUserPassword", ReplyAction="http://tempuri.org/ILandscapeDesignService/EditUserPasswordResponse")]
        System.Threading.Tasks.Task EditUserPasswordAsync(string pass, string newpass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetProjects", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetProjectsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/GetProjectsInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectsFault), Action="http://tempuri.org/ILandscapeDesignService/GetProjectsInvalidProjectsFaultFault", Name="InvalidProjectsFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDProject> GetProjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetProjects", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetProjectsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDProject>> GetProjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetOtherUsersProjects", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetOtherUsersProjectsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/GetOtherUsersProjectsInvalidUserFaultF" +
            "ault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectsFault), Action="http://tempuri.org/ILandscapeDesignService/GetOtherUsersProjectsInvalidProjectsFa" +
            "ultFault", Name="InvalidProjectsFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDProject> GetOtherUsersProjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetOtherUsersProjects", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetOtherUsersProjectsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDProject>> GetOtherUsersProjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetProjectEntities", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetProjectEntitiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/GetProjectEntitiesInvalidUserFaultFaul" +
            "t", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/GetProjectEntitiesInvalidProjectItemFa" +
            "ultFault", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDEntity> GetProjectEntities(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetProjectEntities", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetProjectEntitiesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDEntity>> GetProjectEntitiesAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetPlantTexture", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetPlantTextureResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/GetPlantTextureInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/GetPlantTextureInvalidProjectItemFault" +
            "Fault", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        LandscapeDesignClient.LandscapeDesignReference.LDEntityTexture GetPlantTexture(System.Collections.ObjectModel.ObservableCollection<int> ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetPlantTexture", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetPlantTextureResponse")]
        System.Threading.Tasks.Task<LandscapeDesignClient.LandscapeDesignReference.LDEntityTexture> GetPlantTextureAsync(System.Collections.ObjectModel.ObservableCollection<int> ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetBuildingTexture", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetBuildingTextureResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/GetBuildingTextureInvalidUserFaultFaul" +
            "t", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/GetBuildingTextureInvalidProjectItemFa" +
            "ultFault", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        LandscapeDesignClient.LandscapeDesignReference.LDEntityTexture GetBuildingTexture(System.Collections.ObjectModel.ObservableCollection<int> ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetBuildingTexture", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetBuildingTextureResponse")]
        System.Threading.Tasks.Task<LandscapeDesignClient.LandscapeDesignReference.LDEntityTexture> GetBuildingTextureAsync(System.Collections.ObjectModel.ObservableCollection<int> ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetAllUserPlants", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetAllUserPlantsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/GetAllUserPlantsInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/GetAllUserPlantsInvalidProjectItemFaul" +
            "tFault", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDPlant> GetAllUserPlants();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetAllUserPlants", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetAllUserPlantsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDPlant>> GetAllUserPlantsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetOtherUsersPlants", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetOtherUsersPlantsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/GetOtherUsersPlantsInvalidUserFaultFau" +
            "lt", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/GetOtherUsersPlantsInvalidProjectItemF" +
            "aultFault", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDPlant> GetOtherUsersPlants();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetOtherUsersPlants", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetOtherUsersPlantsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDPlant>> GetOtherUsersPlantsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetPlantsCharacteristics", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetPlantsCharacteristicsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/GetPlantsCharacteristicsInvalidUserFau" +
            "ltFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/GetPlantsCharacteristicsInvalidProject" +
            "ItemFaultFault", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        LandscapeDesignClient.LandscapeDesignReference.LDPlantCharacteristics GetPlantsCharacteristics();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetPlantsCharacteristics", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetPlantsCharacteristicsResponse")]
        System.Threading.Tasks.Task<LandscapeDesignClient.LandscapeDesignReference.LDPlantCharacteristics> GetPlantsCharacteristicsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetAllUserBuildings", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetAllUserBuildingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/GetAllUserBuildingsInvalidUserFaultFau" +
            "lt", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/GetAllUserBuildingsInvalidProjectItemF" +
            "aultFault", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDBuilding> GetAllUserBuildings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetAllUserBuildings", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetAllUserBuildingsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDBuilding>> GetAllUserBuildingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetOtherUsersBuildings", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetOtherUsersBuildingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/GetOtherUsersBuildingsInvalidUserFault" +
            "Fault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/GetOtherUsersBuildingsInvalidProjectIt" +
            "emFaultFault", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDBuilding> GetOtherUsersBuildings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetOtherUsersBuildings", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetOtherUsersBuildingsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDBuilding>> GetOtherUsersBuildingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetBuildingCharacteristics", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetBuildingCharacteristicsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/GetBuildingCharacteristicsInvalidUserF" +
            "aultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/GetBuildingCharacteristicsInvalidProje" +
            "ctItemFaultFault", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        LandscapeDesignClient.LandscapeDesignReference.LDBuildingCharacteristics GetBuildingCharacteristics();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/GetBuildingCharacteristics", ReplyAction="http://tempuri.org/ILandscapeDesignService/GetBuildingCharacteristicsResponse")]
        System.Threading.Tasks.Task<LandscapeDesignClient.LandscapeDesignReference.LDBuildingCharacteristics> GetBuildingCharacteristicsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/AddProject", ReplyAction="http://tempuri.org/ILandscapeDesignService/AddProjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/AddProjectInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectsFault), Action="http://tempuri.org/ILandscapeDesignService/AddProjectInvalidProjectsFaultFault", Name="InvalidProjectsFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        int AddProject(LandscapeDesignClient.LandscapeDesignReference.LDProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/AddProject", ReplyAction="http://tempuri.org/ILandscapeDesignService/AddProjectResponse")]
        System.Threading.Tasks.Task<int> AddProjectAsync(LandscapeDesignClient.LandscapeDesignReference.LDProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/EditProject", ReplyAction="http://tempuri.org/ILandscapeDesignService/EditProjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/EditProjectInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectsFault), Action="http://tempuri.org/ILandscapeDesignService/EditProjectInvalidProjectsFaultFault", Name="InvalidProjectsFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        void EditProject(LandscapeDesignClient.LandscapeDesignReference.LDProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/EditProject", ReplyAction="http://tempuri.org/ILandscapeDesignService/EditProjectResponse")]
        System.Threading.Tasks.Task EditProjectAsync(LandscapeDesignClient.LandscapeDesignReference.LDProject project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/ShareProject", ReplyAction="http://tempuri.org/ILandscapeDesignService/ShareProjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/ShareProjectInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/ShareProjectInvalidProjectItemFaultFau" +
            "lt", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        void ShareProject(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/ShareProject", ReplyAction="http://tempuri.org/ILandscapeDesignService/ShareProjectResponse")]
        System.Threading.Tasks.Task ShareProjectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/DeleteProject", ReplyAction="http://tempuri.org/ILandscapeDesignService/DeleteProjectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/DeleteProjectInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectsFault), Action="http://tempuri.org/ILandscapeDesignService/DeleteProjectInvalidProjectsFaultFault" +
            "", Name="InvalidProjectsFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        void DeleteProject(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/DeleteProject", ReplyAction="http://tempuri.org/ILandscapeDesignService/DeleteProjectResponse")]
        System.Threading.Tasks.Task DeleteProjectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/AddPlant", ReplyAction="http://tempuri.org/ILandscapeDesignService/AddPlantResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/AddPlantInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/AddPlantInvalidProjectItemFaultFault", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        int AddPlant(LandscapeDesignClient.LandscapeDesignReference.LDPlant plant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/AddPlant", ReplyAction="http://tempuri.org/ILandscapeDesignService/AddPlantResponse")]
        System.Threading.Tasks.Task<int> AddPlantAsync(LandscapeDesignClient.LandscapeDesignReference.LDPlant plant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/EditPlant", ReplyAction="http://tempuri.org/ILandscapeDesignService/EditPlantResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/EditPlantInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/EditPlantInvalidProjectItemFaultFault", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        void EditPlant(LandscapeDesignClient.LandscapeDesignReference.LDPlant plant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/EditPlant", ReplyAction="http://tempuri.org/ILandscapeDesignService/EditPlantResponse")]
        System.Threading.Tasks.Task EditPlantAsync(LandscapeDesignClient.LandscapeDesignReference.LDPlant plant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/SharePlant", ReplyAction="http://tempuri.org/ILandscapeDesignService/SharePlantResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/SharePlantInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/SharePlantInvalidProjectItemFaultFault" +
            "", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        void SharePlant(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/SharePlant", ReplyAction="http://tempuri.org/ILandscapeDesignService/SharePlantResponse")]
        System.Threading.Tasks.Task SharePlantAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/DeletePlant", ReplyAction="http://tempuri.org/ILandscapeDesignService/DeletePlantResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/DeletePlantInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/DeletePlantInvalidProjectItemFaultFaul" +
            "t", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        void DeletePlant(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/DeletePlant", ReplyAction="http://tempuri.org/ILandscapeDesignService/DeletePlantResponse")]
        System.Threading.Tasks.Task DeletePlantAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/AddBuilding", ReplyAction="http://tempuri.org/ILandscapeDesignService/AddBuildingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/AddBuildingInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/AddBuildingInvalidProjectItemFaultFaul" +
            "t", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        int AddBuilding(LandscapeDesignClient.LandscapeDesignReference.LDBuilding building);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/AddBuilding", ReplyAction="http://tempuri.org/ILandscapeDesignService/AddBuildingResponse")]
        System.Threading.Tasks.Task<int> AddBuildingAsync(LandscapeDesignClient.LandscapeDesignReference.LDBuilding building);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/EditBuilding", ReplyAction="http://tempuri.org/ILandscapeDesignService/EditBuildingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/EditBuildingInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/EditBuildingInvalidProjectItemFaultFau" +
            "lt", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        void EditBuilding(LandscapeDesignClient.LandscapeDesignReference.LDBuilding building);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/EditBuilding", ReplyAction="http://tempuri.org/ILandscapeDesignService/EditBuildingResponse")]
        System.Threading.Tasks.Task EditBuildingAsync(LandscapeDesignClient.LandscapeDesignReference.LDBuilding building);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/ShareBuilding", ReplyAction="http://tempuri.org/ILandscapeDesignService/ShareBuildingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/ShareBuildingInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/ShareBuildingInvalidProjectItemFaultFa" +
            "ult", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        void ShareBuilding(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/ShareBuilding", ReplyAction="http://tempuri.org/ILandscapeDesignService/ShareBuildingResponse")]
        System.Threading.Tasks.Task ShareBuildingAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/DeleteBuilding", ReplyAction="http://tempuri.org/ILandscapeDesignService/DeleteBuildingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidUserFault), Action="http://tempuri.org/ILandscapeDesignService/DeleteBuildingInvalidUserFaultFault", Name="InvalidUserFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        [System.ServiceModel.FaultContractAttribute(typeof(LandscapeDesignClient.LandscapeDesignReference.InvalidProjectItemFault), Action="http://tempuri.org/ILandscapeDesignService/DeleteBuildingInvalidProjectItemFaultF" +
            "ault", Name="InvalidProjectItemFault", Namespace="http://schemas.datacontract.org/2004/07/LandscapeDesignServer")]
        void DeleteBuilding(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILandscapeDesignService/DeleteBuilding", ReplyAction="http://tempuri.org/ILandscapeDesignService/DeleteBuildingResponse")]
        System.Threading.Tasks.Task DeleteBuildingAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILandscapeDesignServiceChannel : LandscapeDesignClient.LandscapeDesignReference.ILandscapeDesignService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LandscapeDesignServiceClient : System.ServiceModel.ClientBase<LandscapeDesignClient.LandscapeDesignReference.ILandscapeDesignService>, LandscapeDesignClient.LandscapeDesignReference.ILandscapeDesignService {
        
        public LandscapeDesignServiceClient() {
        }
        
        public LandscapeDesignServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LandscapeDesignServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LandscapeDesignServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LandscapeDesignServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public LandscapeDesignClient.LandscapeDesignReference.LDUser Login(string email, string password) {
            return base.Channel.Login(email, password);
        }
        
        public System.Threading.Tasks.Task<LandscapeDesignClient.LandscapeDesignReference.LDUser> LoginAsync(string email, string password) {
            return base.Channel.LoginAsync(email, password);
        }
        
        public LandscapeDesignClient.LandscapeDesignReference.LDUser Register(string email, string password, string name) {
            return base.Channel.Register(email, password, name);
        }
        
        public System.Threading.Tasks.Task<LandscapeDesignClient.LandscapeDesignReference.LDUser> RegisterAsync(string email, string password, string name) {
            return base.Channel.RegisterAsync(email, password, name);
        }
        
        public bool SendConfirmKey(string email, string password) {
            return base.Channel.SendConfirmKey(email, password);
        }
        
        public System.Threading.Tasks.Task<bool> SendConfirmKeyAsync(string email, string password) {
            return base.Channel.SendConfirmKeyAsync(email, password);
        }
        
        public bool ConfirmRegister(string email, string key) {
            return base.Channel.ConfirmRegister(email, key);
        }
        
        public System.Threading.Tasks.Task<bool> ConfirmRegisterAsync(string email, string key) {
            return base.Channel.ConfirmRegisterAsync(email, key);
        }
        
        public void EditUserName(string name) {
            base.Channel.EditUserName(name);
        }
        
        public System.Threading.Tasks.Task EditUserNameAsync(string name) {
            return base.Channel.EditUserNameAsync(name);
        }
        
        public void EditUserPassword(string pass, string newpass) {
            base.Channel.EditUserPassword(pass, newpass);
        }
        
        public System.Threading.Tasks.Task EditUserPasswordAsync(string pass, string newpass) {
            return base.Channel.EditUserPasswordAsync(pass, newpass);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDProject> GetProjects() {
            return base.Channel.GetProjects();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDProject>> GetProjectsAsync() {
            return base.Channel.GetProjectsAsync();
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDProject> GetOtherUsersProjects() {
            return base.Channel.GetOtherUsersProjects();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDProject>> GetOtherUsersProjectsAsync() {
            return base.Channel.GetOtherUsersProjectsAsync();
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDEntity> GetProjectEntities(int id) {
            return base.Channel.GetProjectEntities(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDEntity>> GetProjectEntitiesAsync(int id) {
            return base.Channel.GetProjectEntitiesAsync(id);
        }
        
        public LandscapeDesignClient.LandscapeDesignReference.LDEntityTexture GetPlantTexture(System.Collections.ObjectModel.ObservableCollection<int> ids) {
            return base.Channel.GetPlantTexture(ids);
        }
        
        public System.Threading.Tasks.Task<LandscapeDesignClient.LandscapeDesignReference.LDEntityTexture> GetPlantTextureAsync(System.Collections.ObjectModel.ObservableCollection<int> ids) {
            return base.Channel.GetPlantTextureAsync(ids);
        }
        
        public LandscapeDesignClient.LandscapeDesignReference.LDEntityTexture GetBuildingTexture(System.Collections.ObjectModel.ObservableCollection<int> ids) {
            return base.Channel.GetBuildingTexture(ids);
        }
        
        public System.Threading.Tasks.Task<LandscapeDesignClient.LandscapeDesignReference.LDEntityTexture> GetBuildingTextureAsync(System.Collections.ObjectModel.ObservableCollection<int> ids) {
            return base.Channel.GetBuildingTextureAsync(ids);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDPlant> GetAllUserPlants() {
            return base.Channel.GetAllUserPlants();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDPlant>> GetAllUserPlantsAsync() {
            return base.Channel.GetAllUserPlantsAsync();
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDPlant> GetOtherUsersPlants() {
            return base.Channel.GetOtherUsersPlants();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDPlant>> GetOtherUsersPlantsAsync() {
            return base.Channel.GetOtherUsersPlantsAsync();
        }
        
        public LandscapeDesignClient.LandscapeDesignReference.LDPlantCharacteristics GetPlantsCharacteristics() {
            return base.Channel.GetPlantsCharacteristics();
        }
        
        public System.Threading.Tasks.Task<LandscapeDesignClient.LandscapeDesignReference.LDPlantCharacteristics> GetPlantsCharacteristicsAsync() {
            return base.Channel.GetPlantsCharacteristicsAsync();
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDBuilding> GetAllUserBuildings() {
            return base.Channel.GetAllUserBuildings();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDBuilding>> GetAllUserBuildingsAsync() {
            return base.Channel.GetAllUserBuildingsAsync();
        }
        
        public System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDBuilding> GetOtherUsersBuildings() {
            return base.Channel.GetOtherUsersBuildings();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<LandscapeDesignClient.LandscapeDesignReference.LDBuilding>> GetOtherUsersBuildingsAsync() {
            return base.Channel.GetOtherUsersBuildingsAsync();
        }
        
        public LandscapeDesignClient.LandscapeDesignReference.LDBuildingCharacteristics GetBuildingCharacteristics() {
            return base.Channel.GetBuildingCharacteristics();
        }
        
        public System.Threading.Tasks.Task<LandscapeDesignClient.LandscapeDesignReference.LDBuildingCharacteristics> GetBuildingCharacteristicsAsync() {
            return base.Channel.GetBuildingCharacteristicsAsync();
        }
        
        public int AddProject(LandscapeDesignClient.LandscapeDesignReference.LDProject project) {
            return base.Channel.AddProject(project);
        }
        
        public System.Threading.Tasks.Task<int> AddProjectAsync(LandscapeDesignClient.LandscapeDesignReference.LDProject project) {
            return base.Channel.AddProjectAsync(project);
        }
        
        public void EditProject(LandscapeDesignClient.LandscapeDesignReference.LDProject project) {
            base.Channel.EditProject(project);
        }
        
        public System.Threading.Tasks.Task EditProjectAsync(LandscapeDesignClient.LandscapeDesignReference.LDProject project) {
            return base.Channel.EditProjectAsync(project);
        }
        
        public void ShareProject(int id) {
            base.Channel.ShareProject(id);
        }
        
        public System.Threading.Tasks.Task ShareProjectAsync(int id) {
            return base.Channel.ShareProjectAsync(id);
        }
        
        public void DeleteProject(int id) {
            base.Channel.DeleteProject(id);
        }
        
        public System.Threading.Tasks.Task DeleteProjectAsync(int id) {
            return base.Channel.DeleteProjectAsync(id);
        }
        
        public int AddPlant(LandscapeDesignClient.LandscapeDesignReference.LDPlant plant) {
            return base.Channel.AddPlant(plant);
        }
        
        public System.Threading.Tasks.Task<int> AddPlantAsync(LandscapeDesignClient.LandscapeDesignReference.LDPlant plant) {
            return base.Channel.AddPlantAsync(plant);
        }
        
        public void EditPlant(LandscapeDesignClient.LandscapeDesignReference.LDPlant plant) {
            base.Channel.EditPlant(plant);
        }
        
        public System.Threading.Tasks.Task EditPlantAsync(LandscapeDesignClient.LandscapeDesignReference.LDPlant plant) {
            return base.Channel.EditPlantAsync(plant);
        }
        
        public void SharePlant(int id) {
            base.Channel.SharePlant(id);
        }
        
        public System.Threading.Tasks.Task SharePlantAsync(int id) {
            return base.Channel.SharePlantAsync(id);
        }
        
        public void DeletePlant(int id) {
            base.Channel.DeletePlant(id);
        }
        
        public System.Threading.Tasks.Task DeletePlantAsync(int id) {
            return base.Channel.DeletePlantAsync(id);
        }
        
        public int AddBuilding(LandscapeDesignClient.LandscapeDesignReference.LDBuilding building) {
            return base.Channel.AddBuilding(building);
        }
        
        public System.Threading.Tasks.Task<int> AddBuildingAsync(LandscapeDesignClient.LandscapeDesignReference.LDBuilding building) {
            return base.Channel.AddBuildingAsync(building);
        }
        
        public void EditBuilding(LandscapeDesignClient.LandscapeDesignReference.LDBuilding building) {
            base.Channel.EditBuilding(building);
        }
        
        public System.Threading.Tasks.Task EditBuildingAsync(LandscapeDesignClient.LandscapeDesignReference.LDBuilding building) {
            return base.Channel.EditBuildingAsync(building);
        }
        
        public void ShareBuilding(int id) {
            base.Channel.ShareBuilding(id);
        }
        
        public System.Threading.Tasks.Task ShareBuildingAsync(int id) {
            return base.Channel.ShareBuildingAsync(id);
        }
        
        public void DeleteBuilding(int id) {
            base.Channel.DeleteBuilding(id);
        }
        
        public System.Threading.Tasks.Task DeleteBuildingAsync(int id) {
            return base.Channel.DeleteBuildingAsync(id);
        }
    }
}
